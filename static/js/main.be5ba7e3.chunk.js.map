{"version":3,"sources":["components/Home.tsx","components/Projects.tsx","components/Notes.tsx","components/NoMatch.tsx","Routes.tsx","components/NavBar.tsx","App.tsx","serviceWorker.tsx","index.tsx"],"names":["Home","useEffect","document","title","react_default","a","createElement","className","href","Projects","Bullets","_ref","list","map","item","index","key","todoNotes","consoleNotes","Notes","junkPage","Date","toString","slice","react_router_dom","to","Notes_Bullets","NoMatch","_useState","useState","_useState2","Object","slicedToArray","seconds","setSeconds","interval","setInterval","clearInterval","react_router","routes","name","path","component","lazy","__webpack_require__","e","then","bind","NavBar","id","route","exact","App","basename","process","components_NavBar","react","fallback","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4MAqBeA,EAnBF,WAKX,OAJAC,oBAAU,WACRC,SAASC,MAAQ,QAChB,IAGDC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,2EACiEF,EAAAC,EAAAC,cAAA,WAC/DF,EAAAC,EAAAC,cAAA,mBAFF,IAEgBF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,gCAAR,yBAFhB,IAEiFJ,EAAAC,EAAAC,cAAA,WAC/EF,EAAAC,EAAAC,cAAA,mBAHF,mBAG+BF,EAAAC,EAAAC,cAAA,WAC7BF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,kCAAR,UAJF,IAIsDJ,EAAAC,EAAAC,cAAA,WAJtD,eCKSG,EAbE,WAKf,OAJAR,oBAAU,WACRC,SAASC,MAAQ,YAChB,IAGDC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,uCCFAI,EAAqC,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KAC5C,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACGM,EAAKC,IAAI,SAACC,EAAMC,GACf,OAAOX,EAAAC,EAAAC,cAAA,MAAIU,IAAKD,GAAQD,QA8B5BG,EAAsB,CAC1B,0CACA,2BACA,4DACA,qDACA,gDACA,oCAGIC,EAAyB,CAC7B,sJAEA,mFACA,gFAGaC,EAvCD,WACZlB,oBAAU,WACRC,SAASC,MAAQ,SAChB,IAEH,IAAIiB,EAAW,MAAQ,IAAIC,MAAQC,SAAS,IAAIC,OAAO,GAEvD,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAIL,GAAV,QACJhB,EAAAC,EAAAC,cAAA,8BAEFF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAACoB,EAAD,CAASd,KAAMK,IACfb,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAACoB,EAAD,CAASd,KAAMM,cCfNS,EApBC,WAAM,IAAAC,EACUC,mBAAS,GADnBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACbK,EADaH,EAAA,GACJI,EADIJ,EAAA,GAQpB,OALA7B,oBAAU,WACR,IAAIkC,EAAWC,YAAY,kBAAMF,EAAW,SAAAD,GAAO,OAAIA,EAAU,KAAI,KACrE,OAAO,kBAAMI,cAAcF,KAC1B,CAACF,IAGW,IAAZA,EACC7B,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAUb,GAAG,MAEbrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,kDAA0C2B,EAA1C,UAAsE,IAAZA,EAAgB,IAAM,GAAhF,SCEKM,EAAqB,CAChC,CACEC,KAAM,OACNC,KAAM,IACNC,UAAW1C,GAEb,CACEwC,KAAM,WACNC,KAAM,YACNC,UAAWjC,GAEb,CACE+B,KAAM,QACNC,KAAM,SACNC,UAAWvB,GAEb,CACEqB,KAAM,QACNC,KAAM,SACNC,UA/BUC,eAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,aAiCvB,CACEP,KAAM,UACNC,KAAM,WACNC,UAnCWC,eAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,aAqCxB,CACEP,KAAM,UACNC,KAAM,SACNC,UAvCaC,eAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,cCObC,EAZA,WACb,OACE5C,EAAAC,EAAAC,cAAA,OAAK2C,GAAG,WACN7C,EAAAC,EAAAC,cAAA,UACGiC,EAAO1B,IAAI,SAACqC,EAAOnC,GAClB,OAAOX,EAAAC,EAAAC,cAAA,MAAIU,IAAKD,GAAOX,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAS2B,OAAK,EAAC1B,GAAIyB,EAAMT,MAAOS,EAAMV,YCexDY,SAlBO,WACpB,OACEhD,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAQ6B,SAAUC,IAChBlD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiD,EAAD,MACAnD,EAAAC,EAAAC,cAACkD,EAAA,SAAD,CAAUC,SAAUrD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,kBAClBH,EAAAC,EAAAC,cAACgC,EAAA,EAAD,KACGC,EAAO1B,IAAI,SAAAqC,GACV,OAAO9C,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOtB,IAAKkC,EAAMV,KAAMW,OAAK,EAACV,KAAMS,EAAMT,KAAMC,UAAWQ,EAAMR,cAE1EtC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOI,UAAWf,UCJV+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAAS/D,SAASgE,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.be5ba7e3.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\n\r\nconst Home = () => {\r\n  useEffect(() => {\r\n    document.title = \"Home\";\r\n  }, []);\r\n\r\n  return (\r\n    <div className='page'>\r\n      <h2>Rogers Xiang</h2>\r\n      <p>\r\n        B.S. in Electrical Engineering, University of Washington, 2019 <br />\r\n        <b>Email:</b> <a href=\"mailto:rogersxiang@gmail.com\">rogersxiang@gmail.com</a> <br />\r\n        <b>Phone:</b> (425) 922-5957 <br />\r\n        <a href=\"https://github.com/jodreclado/\">Github</a> <br />\r\n        TS.23.060\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;","import React, { useEffect } from 'react';\r\n\r\nconst Projects = () => {\r\n  useEffect(() => {\r\n    document.title = \"Projects\";\r\n  }, []);\r\n \r\n  return (\r\n    <div className='page'>\r\n      <h2>Projects</h2>\r\n      <p>Undergoing renovation...</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Projects;","import React, { useEffect, FunctionComponent } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface IProps {\r\n  list: string[];\r\n}\r\n\r\n// refactor later\r\nconst Bullets: FunctionComponent<IProps> = ({ list }) => {\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {list.map((item, index) => {\r\n          return <li key={index}>{item}</li>\r\n        })}\r\n      </ul>\r\n    </div>  \r\n  )\r\n}\r\n\r\nconst Notes = () => {\r\n  useEffect(() => {\r\n    document.title = \"Notes\";\r\n  }, []);\r\n\r\n  let junkPage = \"/\" + (+new Date()).toString(36).slice(-5);\r\n\r\n  return (\r\n    <div className='page'>\r\n      <h2>Notes</h2>\r\n      <h3>Tests</h3>\r\n      <ul>\r\n        <li><Link to={junkPage}>404</Link></li>\r\n        <li>Error boundary?</li>\r\n      </ul>\r\n      <h3>TODO</h3>\r\n      <Bullets list={todoNotes} />\r\n      <h3>Console log</h3>\r\n      <Bullets list={consoleNotes} />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst todoNotes: string[] = [\r\n  \"Redo API calls + add more functionality\",\r\n  \"Update Pokemon UI + info\",\r\n  \"Refactor some code and components (e.g., document titles)\",\r\n  \"Test different viewports, mobile, browser versions\",\r\n  \"Change widget? (flash now blocked by default)\",\r\n  \"Add more pictures + collapsibles\"\r\n]\r\n\r\nconst consoleNotes: string[] = [\r\n  \"Can't perform a state update on an unmounted component. \" + \r\n  \"Fix by cancelling all subscriptions and asynchronous tasks in a useEffect cleanup function.\",\r\n  \"Cross-origin plugin content must have a visible size larger than 400x300 pixels.\",\r\n  \"React child elements need unique keys (avoid using index for dynamic lists).\"\r\n] \r\n\r\nexport default Notes;","import React, { useState, useEffect } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst NoMatch = () => {\r\n  const [seconds, setSeconds] = useState(5);\r\n\r\n  useEffect(() => {\r\n    let interval = setInterval(() => setSeconds(seconds => seconds - 1), 1000);\r\n    return () => clearInterval(interval);\r\n  }, [seconds]);\r\n  \r\n  return (\r\n    (seconds === 0) ? (\r\n      <Redirect to=\"/\" />\r\n    ) : (\r\n      <div className='page'>\r\n        <h2>404</h2>\r\n        <p>page not found, returning to index in {seconds} second{seconds !== 1 ? \"s\" : \"\"}...</p>\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default NoMatch;","// https://reactjs.org/docs/code-splitting.html\r\nimport { lazy } from 'react';\r\n\r\nimport Home from './components/Home';\r\nimport Projects from './components/Projects';\r\nimport Notes from './components/Notes';\r\n\r\nconst Async = lazy(() => import('./components/Async'));  // lazy load\r\nconst Search = lazy(() => import('./components/Search'));\r\nconst Recorder = lazy(() => import('./components/Recorder'));\r\nexport { default as NoMatch } from './components/NoMatch';  // 404 route\r\n\r\n// names are used as stable keys\r\ninterface RouteObj {\r\n  name: string;\r\n  path: string;\r\n  component: (() => JSX.Element) | React.LazyExoticComponent<() => JSX.Element>;\r\n}\r\n\r\nexport const routes: RouteObj[] = [\r\n  {\r\n    name: 'Home',\r\n    path: '/',\r\n    component: Home,\r\n  },\r\n  {\r\n    name: 'Projects',\r\n    path: '/projects',\r\n    component: Projects,\r\n  },\r\n  {\r\n    name: 'Notes',\r\n    path: '/notes',\r\n    component: Notes,\r\n  },\r\n  {\r\n    name: 'Space',\r\n    path: '/space',\r\n    component: Async,\r\n  },\r\n  {\r\n    name: 'Pokemon',\r\n    path: '/pokedex',\r\n    component: Search,\r\n  },\r\n  {\r\n    name: 'Vocaroo',\r\n    path: '/voice',\r\n    component: Recorder,\r\n  }\r\n]\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { routes } from '../Routes';\r\n\r\nconst NavBar = () => {\r\n  return (\r\n    <div id=\"nav-bar\">\r\n      <ul>\r\n        {routes.map((route, index) => {\r\n          return <li key={index}><NavLink exact to={route.path}>{route.name}</NavLink></li>\r\n        })}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NavBar;","import React, { Suspense } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { routes, NoMatch } from './Routes';\nimport NavBar from './components/NavBar';\nimport './main.css'\n\nconst App: React.FC = () => {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div>\n        <NavBar />\n        <Suspense fallback={<h2 className='page'>loadingâ€¦</h2>}>\n          <Switch>\n            {routes.map(route => {\n              return <Route key={route.name} exact path={route.path} component={route.component} />\n            })}\n            <Route component={NoMatch} />\n          </Switch>\n        </Suspense>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}